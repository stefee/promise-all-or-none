function asyncGeneratorStep(a, b, c, d, e, f, g) {
    try {
        var h = a[f](g), i = h.value;
    } catch (j) {
        c(j);
        return;
    }
    h.done ? b(i) : Promise.resolve(i).then(d, e);
}
function _asyncToGenerator(k) {
    return function() {
        var l = this, m = arguments;
        return new Promise(function(b, c) {
            var a = k.apply(l, m);
            function d(i) {
                asyncGeneratorStep(a, b, c, d, e, "next", i);
            }
            function e(n) {
                asyncGeneratorStep(a, b, c, d, e, "throw", n);
            }
            d(void 0);
        });
    };
}
exports.default = void 0;
const promiseSettledAggregate = _asyncToGenerator(function*(o) {
    const p = yield Promise.allSettled(o), q = p.filter((r)=>"rejected" === r.status
    );
    if (1 === q.length && q[0]) throw q[0].reason;
    if (q.length > 0) throw new AggregateError(q.map((s)=>s.reason
    ), "Some promises were rejected");
    return p.map((t)=>t.value
    );
});
var _default = promiseSettledAggregate;
exports.default = _default;

